{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","App.js","serviceWorker.js","reducers/postReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["Posts","this","props","fetchPosts","postItems","posts","map","post","key","id","title","body","Component","connect","state","items","dispatch","fetch","then","res","json","type","payload","App","className","Boolean","window","location","hostname","match","initialState","item","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPASMA,E,6LAEEC,KAAKC,MAAMC,e,+BAKX,IAAMC,EAAUH,KAAKC,MAAMG,MAAMC,KAAI,SAAAC,GAAI,OACrC,yBAAKC,IAAOD,EAAKE,IACzB,4BAAKF,EAAKG,OACN,2BAAIH,EAAKI,UAIb,OACQ,6BACA,qCACCP,O,GAjBOQ,aAmCLC,eAJS,SAAAC,GAAK,MAAK,CAC9BT,MAAMS,EAAMT,MAAMU,SAGiB,CAACZ,WC1Cf,kBAAI,SAAAa,GACzBC,MAAM,8CACLC,MAAM,SAAAC,GAAG,OAAEA,EAAIC,UACfF,MAAK,SAAAb,GAAK,OACPW,EAAS,CACLK,KCPa,cDQbC,QAAQjB,UDoCLQ,CAAsCb,GG5BtCuB,MAXf,WACE,OAGE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,olBChBN,IAAMC,EAAe,CACrBf,MAAM,GACNgB,KAAK,ICAUC,cAAgB,CAC3B3B,MDIW,WAAqC,IAA3BS,EAA0B,uDAApBgB,EAAaG,EAAO,uCAC/C,OAAOA,EAAOZ,MACd,IHXqB,cGYrB,OAAO,EAAP,GACGP,EADH,CAEAC,MAAMkB,EAAOX,UAEjB,QACI,OAAOR,MEZLoB,EAAa,CAACC,KAGLC,EAFDC,YAAYC,EAFP,GAEgCC,IAAe,WAAf,EAAmBL,ICOtEM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAGHM,SAASC,eAAe,SJ+GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.8583a40e.chunk.js","sourcesContent":[" import React, { Component } from 'react'\n import PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {fetchPosts} from '../actions/postActions'\n\n\n\n\n\nclass Posts extends Component {\n    componentWillMount(){\n        this.props.fetchPosts();\n    }\n    \n\n    render() {\n        const postItems=this.props.posts.map(post=> (\n            <div key = {post.id}>\n    <h3>{post.title}</h3>\n        <p>{post.body}</p>\n        </div>\n        )); \n\n    return (\n            <div>\n            <h1>Posts</h1>\n            {postItems}\n\n\n            </div>\n        );\n    }\n}\n\n\nPosts.propTypes = {\nfetchPosts:PropTypes.func.isRequired,\nposts:PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n    posts:state.posts.items\n});\n\nexport default connect(mapStateToProps,{fetchPosts})(Posts);"," import {FETCH_POSTS,NEW_POSTS} from './types'\n\nexport const fetchPosts =()=>dispatch =>{\n    fetch('https://jsonplaceholder.typicode.com/posts')\n    .then (res=>res.json())\n    .then(posts=>\n        dispatch({\n            type:FETCH_POSTS,\n            payload:posts\n        }));\n};\n\n\n\n\n\n\n\n\n\n\n\n","export const FETCH_POSTS='FETCH_POSTS';\nexport const NEW_POSTS='NEW_POSTS';","import React from 'react';\nimport Posts from \"./components/Posts\";\n\n\n\nfunction App() {\n  return (\n    \n\n    <div className=\"App\">\n      <Posts/>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {FETCH_POSTS,NEW_POSTS} from '../actions/types'\n\nconst initialState = {\nitems:[],\nitem:{}\n\n\n};\n\nexport default function (state=initialState,action){\n    switch(action.type){\n    case FETCH_POSTS:\n    return {\n    ...state,\n    items:action.payload\n    };\ndefault:\n    return state;\n    }\n}\n","import {combineReducers  } from \"redux\";\nimport postReducer from \"./postReducer\";\n\n\nexport default combineReducers({\n    posts:postReducer\n});","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst initialState={};\nconst middleware = [thunk];\nconst store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  \n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}